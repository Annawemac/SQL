# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the artists with songs more popular than a 94
SELECT artist_name 
FROM BIT_DB.Spotifydata
WHERE popularity>94

#Next I determined the track that is the most popular
SELECT track_name 
FROM BIT_DB.Spotifydata 
GROUP BY track_name 
ORDER BY popularity desc
LIMIT 1

#Next I created a Case by which I ordered each track name by their popularity in descending order
SELECT track_name, 
CASE 
WHEN popularity > 90 THEN "Most Popular"
WHEN popularity > 80 THEN "2nd Most Popular"
WHEN popularity > 70 THEN "3rd Most Popular"
ELSE "Least popular"
END as "Popularity Ranking"
FROM BIT_DB.Spotifydata
ORDER BY Popularity desc

#Next I determined which id's had a danceabiltiy of more than .76
SELECT COUNT(id) 
FROM BIT_DB.Spotifydata
WHERE danceability < "0.76"

#Then I determined which artist is the most popular 
SELECT distinct artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY ASC LIMIT 1
































